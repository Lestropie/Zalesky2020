#!/bin/bash

# Reproduce the steps for demonstrating the operation of SIFT and SIFT2 on the
#   phantom structure and reconstruction presented in:
#
# Zalesky A, Sarwar T, Ramamohanarao K
# A cautionary note on the use of SIFT in pathological connectomes
# Magn Reson Med. 2020 Mar;83(2):791-794. doi: 10.1002/mrm.28037
#
# , when streamlines truncated due to pathology are included in the model, as
#   shown in:
#
# Smith RE, Calamante F, Connelly A
# Notes on "A cautionary note on the use of SIFT in pathological connectomes"
# Magn Reson Med. 2020 Jul;84(5):2303-2307. doi: 10.1002/mrm.28266

# Files provided in directory 'data/':
# FODs.mif: Fibre Orientation Distribution data; includes pathology in upper bundle (bundle 1)
# mask_B1.mif: Mask covering the entire volume of bundle 1
# mask_B1_left.mif: Mask covering only the volume of bundle 1 to the left of the pathology
# mask_B1_right.mif: Mask covering only the volume of bundle 1 to the right of the pathology
# mask_B2.mif: Mask covering the entire volume of bundle 2

# A working installation of MRtrix3 is required for this script to execute successfully






# Number of streamlines in bundle 2
# Note: This needs to be an even integer
N=40

# Magnitude of FOD in pathological voxel
# Note: Can't currently be set independently due to construction of the phantom;
#   to do so would require embedding the requisite mrcalc / mrcat calls
#   for construction of the FOD phantom into this script
p=0.5

# Number of streamlines to traverse all the way though bundle 1
# Note: This needs to come out to be an even integer
Np=$(echo "${N}*${p}" | bc)
Np=${Np%.*}
NminusNp=$(echo "${N}-${Np}" | bc)

# Number of streamlines to remove from bundles 1 and 2 for exact solution
Nonestar=$(echo "${Np}/2" | bc)
Ntwostar=${Np}

# Number of streamlines to retain in each of those bundles
None=$(echo "${Np}-${Nonestar}" | bc)
Ntwo=$(echo "${N}-${Np}" | bc)






rm -rf tmp/
mkdir tmp

declare -a bundles=("1" "2")
declare -a sides=("left" "right")

# Generate requisite streamlines
# In bundle 1, we do this in four separate steps:
# - For seeds both from left and right side of pathology, we generate:
#   - Half of all streamlines that go on to traverse the entire bundle
#   - Half of all streamlines that fail to traverse the pathological voxel
track_file_list=""
for side in "${sides[@]}"; do
    declare -a mask_suffixes=("_${side}" "")
    for mask_suffix in "${mask_suffixes[@]}"; do
        tracks_path="tmp/tracks_B1_seed${side}${mask_suffix}.tck"
        if [ -z "${mask_suffix}" ]; then
            count=$(echo "${Np}/2" | bc)
        else
            count=$(echo "${NminusNp}/2" | bc)
        fi
        tckgen data/FODs.mif -algorithm sd_stream -seed_direction 1,0,0 -minlength 0 -step 0.001 -select ${count} -seed_image data/mask_B1_${side}.mif -mask data/mask_B1${mask_suffix}.mif ${tracks_path} -quiet
        track_file_list="${track_file_list} ${tracks_path}"
    done
done

# Bundle 2 is much easier
tracks_path="tmp/tracks_B2.tck"
tckgen data/FODs.mif -algorithm sd_stream -seed_direction 1,0,0 -minlength 0 -step 0.001 -select ${N} -seed_image data/mask_B2.mif -mask data/mask_B2.mif ${tracks_path} -quiet
track_file_list=${track_file_list}" "${tracks_path}

# Concatenate all streamlines data together
tckedit ${track_file_list} tmp/tracks.tck -quiet



# First, run SIFT
mkdir tmp/SIFT/
cd tmp/SIFT/
tcksift ../tracks.tck ../../data/FODs.mif result.tck -out_mu mu.txt -output_debug -term_number 1 -nthreads 0 -quiet
cd ../../

# Quantify and report relevant parameters
echo ""
echo "SIFT (gradient descent): "
echo "Track count before SIFT: "$(tckinfo tmp/tracks.tck | grep " count" | tr -d '[:space:]' | cut -d":" -f2)
echo "Track count after SIFT: "$(tckinfo tmp/SIFT/result.tck | grep " count" | tr -d '[:space:]' | cut -d":" -f2)
echo "Cost function before SIFT: "$(mrmath tmp/SIFT/before_cost.mif sum - -axis 0 -quiet | mrmath - sum - -axis 1 -quiet | mrmath - sum - -axis 2 -quiet | mrstats - -output mean)
echo "Cost function after SIFT: "$(mrmath tmp/SIFT/after_cost.mif sum - -axis 0 -quiet | mrmath - sum - -axis 1 -quiet | mrmath - sum - -axis 2 -quiet | mrstats - -output mean)
MU=$(cat tmp/SIFT/mu.txt)
echo "Proportionality coefficient after SIFT: "$MU
tckedit tmp/SIFT/result.tck -include data/mask_B1_left.mif -include data/mask_B1_right.mif tmp/SIFT/result_B1.tck -quiet
tckedit tmp/SIFT/result.tck -include data/mask_B2.mif tmp/SIFT/result_B2.tck -quiet
for bundle in "${bundles[@]}"; do
    COUNT=$(tckinfo tmp/SIFT/result_B${bundle}.tck | grep " count" | tr -d '[:space:]' | cut -d":" -f2)
    echo "Connectivity of bundle ${bundle}: $COUNT streamlines, scaled: "$(echo "$MU * $COUNT" | bc)
done



# SIFT can't quite get the numerically optimal solution because it operates on gradient descent
# Manually generate the derived optimal solution
mkdir tmp/SIFT_exact/
track_file_list=""
for side in "${sides[@]}"; do
    # Retain half of those streamlines that traverse all the way through bundle 1
    # Select half from the two files that were generated by seeding on either side
    track_file_basename="tracks_B1_seed${side}.tck"
    tckedit tmp/${track_file_basename} -number $(echo "${None}/2" | bc) tmp/SIFT_exact/${track_file_basename} -quiet
    track_file_list="${track_file_list} tmp/SIFT_exact/${track_file_basename}"
    # Retain all of the streamlines that don't traverse the pathological voxel
    track_file_basename="tracks_B1_seed${side}_${side}.tck"
    cp tmp/${track_file_basename} tmp/SIFT_exact/${track_file_basename}
    track_file_list="${track_file_list} tmp/SIFT_exact/${track_file_basename}"
done
track_file_basename="tracks_B2.tck"
tckedit tmp/${track_file_basename} -number ${Ntwo} tmp/SIFT_exact/${track_file_basename} -quiet
track_file_list="${track_file_list} tmp/SIFT_exact/${track_file_basename}"
tckedit ${track_file_list} tmp/SIFT_exact/tracks.tck -quiet

# Fit the SIFT model to these data
cd tmp/SIFT_exact/
tcksift tracks.tck ../../data/FODs.mif result.tck -out_mu mu.txt -output_debug -nofilter -nthreads 0 -quiet
cd ../../

# Report the outcome
echo ""
echo "SIFT (exhaustive solution search): "
echo "Total streamline count: "$(tckinfo tmp/SIFT_exact/tracks.tck | grep " count" | tr -d '[:space:]' | cut -d":" -f2)
echo "Cost function: "$(mrmath tmp/SIFT_exact/before_cost.mif sum - -axis 0 -quiet | mrmath - sum - -axis 1 -quiet | mrmath - sum - -axis 2 -quiet | mrstats - -output mean)
MU=$(cat tmp/SIFT_exact/mu.txt)
echo "Proportionality coefficient: "$MU
tckedit tmp/SIFT_exact/tracks.tck -include data/mask_B1_left.mif -include data/mask_B1_right.mif tmp/SIFT_exact/tracks_B1.tck -quiet
for bundle in "${bundles[@]}"; do
    COUNT=$(tckinfo tmp/SIFT_exact/tracks_B${bundle}.tck | grep " count" | tr -d '[:space:]' | cut -d":" -f2)
    echo "Connectivity of bundle ${bundle}: $COUNT streamlines, scaled: "$(echo "$MU * $COUNT" | bc)
done



# Finally, SIFT2
mkdir tmp/SIFT2/
cd tmp/SIFT2/
tcksift2 ../tracks.tck ../../data/FODs.mif result.csv -out_mu mu.txt -output_debug -min_iters 200 -reg_tv 0.0 -reg_tik 0.0 -quiet
cd ../../

echo ""
echo "SIFT2: "
echo "Cost function before SIFT2: "$(mrmath tmp/SIFT2/before_cost.mif sum - -axis 0 -quiet | mrmath - sum - -axis 1 -quiet | mrmath - sum - -axis 2 -quiet | mrstats - -output mean)
echo "Cost function after SIFT2: "$(mrmath tmp/SIFT2/after_cost.mif sum - -axis 0 -quiet | mrmath - sum - -axis 1 -quiet | mrmath - sum - -axis 2 -quiet | mrstats - -output mean)
MU=$(cat tmp/SIFT2/mu.txt)
echo "Proportionality coefficient: "$MU
tckedit tmp/tracks.tck -tck_weights_in tmp/SIFT2/result.csv -include data/mask_B1_left.mif -include data/mask_B1_right.mif -tck_weights_out tmp/SIFT2/result_B1.csv tmp/SIFT2/tracks_B1.tck -nthreads 0 -quiet
tckedit tmp/tracks.tck -tck_weights_in tmp/SIFT2/result.csv -include data/mask_B2.mif -tck_weights_out tmp/SIFT2/result_B2.csv tmp/SIFT2/tracks_B2.tck -nthreads 0 -quiet
for bundle in "${bundles[@]}"; do
    echo "Connectivity of bundle ${bundle}: "$(tail -n1 tmp/SIFT2/result_B${bundle}.csv | tr " " "+" | sed 's/\(.*\)+$/\1/' | awk -v mu=${MU} '{printf("scale=6; %s*(%s)\n",mu,$1)}' | bc)
done
